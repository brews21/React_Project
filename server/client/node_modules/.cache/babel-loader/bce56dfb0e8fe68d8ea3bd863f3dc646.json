{"ast":null,"code":"import _classCallCheck from \"D:\\\\MyFiles\\\\dev\\\\React_Project\\\\server\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\MyFiles\\\\dev\\\\React_Project\\\\server\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\MyFiles\\\\dev\\\\React_Project\\\\server\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\MyFiles\\\\dev\\\\React_Project\\\\server\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\MyFiles\\\\dev\\\\React_Project\\\\server\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\MyFiles\\\\dev\\\\React_Project\\\\server\\\\client\\\\src\\\\components\\\\surveys\\\\SurveyForm.js\";\nimport React, { Component } from \"react\";\nimport { reduxForm, Field } from \"redux-form\";\nimport SurveyField from \"./SurveyField\";\nimport _ from \"lodash\";\nimport { Link } from \"react-router-dom\";\nimport validateEmail from \"../../utils/validateEmails\";\nimport formFields from \"./formFields\"; //when creating any list jsx need the unique key, using the name as this will be unique to any render function\n\nvar SurveyForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SurveyForm, _Component);\n\n  function SurveyForm() {\n    _classCallCheck(this, SurveyForm);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SurveyForm).apply(this, arguments));\n  }\n\n  _createClass(SurveyForm, [{\n    key: \"renderFields\",\n    value: function renderFields() {\n      return _.map(formFields, function (_ref) {\n        var label = _ref.label,\n            name = _ref.name;\n        return React.createElement(Field, {\n          key: name,\n          component: SurveyField,\n          type: \"text\",\n          label: label,\n          name: name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14\n          },\n          __self: this\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.props.onSurveySubmit),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, this.renderFields(), React.createElement(Link, {\n        to: \"/surveys\",\n        className: \"red btn-flat left white-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"teal btn-flat right white-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"Next\", React.createElement(\"i\", {\n        className: \"material-icons right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"arrow_forward\"))));\n    }\n  }]);\n\n  return SurveyForm;\n}(Component);\n\nfunction validate(values) {\n  // if errors is empty then everything is valid\n  var errors = {};\n  errors.recipients = validateEmail(values.recipients || \"\");\n\n  _.each(formFields, function (_ref2) {\n    var name = _ref2.name,\n        noValueError = _ref2.noValueError;\n\n    if (!values[name]) {\n      errors[name] = noValueError;\n    }\n  });\n\n  return errors;\n}\n\nexport default reduxForm({\n  validate: validate,\n  form: \"surveyForm\",\n  destroyOnUnmount: false\n})(SurveyForm);","map":{"version":3,"sources":["D:\\MyFiles\\dev\\React_Project\\server\\client\\src\\components\\surveys\\SurveyForm.js"],"names":["React","Component","reduxForm","Field","SurveyField","_","Link","validateEmail","formFields","SurveyForm","map","label","name","props","handleSubmit","onSurveySubmit","renderFields","validate","values","errors","recipients","each","noValueError","form","destroyOnUnmount"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,YAAjC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;IACMC,U;;;;;;;;;;;;;mCACW;AACb,aAAOJ,CAAC,CAACK,GAAF,CAAMF,UAAN,EAAkB,gBAAqB;AAAA,YAAlBG,KAAkB,QAAlBA,KAAkB;AAAA,YAAXC,IAAW,QAAXA,IAAW;AAC5C,eACE,oBAAC,KAAD;AACE,UAAA,GAAG,EAAEA,IADP;AAEE,UAAA,SAAS,EAAER,WAFb;AAGE,UAAA,IAAI,EAAC,MAHP;AAIE,UAAA,KAAK,EAAEO,KAJT;AAKE,UAAA,IAAI,EAAEC,IALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,OAVM,CAAP;AAWD;;;6BAEQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKD,KAAL,CAAWE,cAAnC,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKC,YAAL,EADH,EAEE,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAC,UAAT;AAAoB,QAAA,SAAS,EAAC,8BAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,EAKE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,gCAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEE;AAAG,QAAA,SAAS,EAAC,sBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFF,CALF,CADF,CADF;AAcD;;;;EA9BsBf,S;;AAiCzB,SAASgB,QAAT,CAAkBC,MAAlB,EAA0B;AACxB;AACA,MAAMC,MAAM,GAAG,EAAf;AAEAA,EAAAA,MAAM,CAACC,UAAP,GAAoBb,aAAa,CAACW,MAAM,CAACE,UAAP,IAAqB,EAAtB,CAAjC;;AAEAf,EAAAA,CAAC,CAACgB,IAAF,CAAOb,UAAP,EAAmB,iBAA4B;AAAA,QAAzBI,IAAyB,SAAzBA,IAAyB;AAAA,QAAnBU,YAAmB,SAAnBA,YAAmB;;AAC7C,QAAI,CAACJ,MAAM,CAACN,IAAD,CAAX,EAAmB;AACjBO,MAAAA,MAAM,CAACP,IAAD,CAAN,GAAeU,YAAf;AACD;AACF,GAJD;;AAMA,SAAOH,MAAP;AACD;;AAED,eAAejB,SAAS,CAAC;AACvBe,EAAAA,QAAQ,EAARA,QADuB;AAEvBM,EAAAA,IAAI,EAAE,YAFiB;AAGvBC,EAAAA,gBAAgB,EAAE;AAHK,CAAD,CAAT,CAIZf,UAJY,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\nimport SurveyField from \"./SurveyField\";\r\nimport _ from \"lodash\";\r\nimport { Link } from \"react-router-dom\";\r\nimport validateEmail from \"../../utils/validateEmails\";\r\nimport formFields from \"./formFields\";\r\n\r\n//when creating any list jsx need the unique key, using the name as this will be unique to any render function\r\nclass SurveyForm extends Component {\r\n  renderFields() {\r\n    return _.map(formFields, ({ label, name }) => {\r\n      return (\r\n        <Field\r\n          key={name}\r\n          component={SurveyField}\r\n          type=\"text\"\r\n          label={label}\r\n          name={name}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.props.handleSubmit(this.props.onSurveySubmit)}>\r\n          {this.renderFields()}\r\n          <Link to=\"/surveys\" className=\"red btn-flat left white-text\">\r\n            Cancel\r\n          </Link>\r\n          <button type=\"submit\" className=\"teal btn-flat right white-text\">\r\n            Next\r\n            <i className=\"material-icons right\">arrow_forward</i>\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction validate(values) {\r\n  // if errors is empty then everything is valid\r\n  const errors = {};\r\n\r\n  errors.recipients = validateEmail(values.recipients || \"\");\r\n\r\n  _.each(formFields, ({ name, noValueError }) => {\r\n    if (!values[name]) {\r\n      errors[name] = noValueError;\r\n    }\r\n  });\r\n\r\n  return errors;\r\n}\r\n\r\nexport default reduxForm({\r\n  validate,\r\n  form: \"surveyForm\",\r\n  destroyOnUnmount: false\r\n})(SurveyForm);\r\n"]},"metadata":{},"sourceType":"module"}